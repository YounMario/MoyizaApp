package com.younchen.chat.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.younchen.chat.entity.Friends;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FRIENDS.
*/
public class FriendsDao extends AbstractDao<Friends, Long> {

    public static final String TABLENAME = "FRIENDS";

    /**
     * Properties of entity Friends.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property OwnerId = new Property(1, String.class, "ownerId", false, "OWNER_ID");
        public final static Property RealName = new Property(2, String.class, "realName", false, "REAL_NAME");
        public final static Property Sex = new Property(3, Integer.class, "sex", false, "SEX");
        public final static Property Age = new Property(4, Integer.class, "age", false, "AGE");
        public final static Property HeadImg = new Property(5, String.class, "headImg", false, "HEAD_IMG");
        public final static Property Moto = new Property(6, String.class, "moto", false, "MOTO");
        public final static Property BirthDay = new Property(7, String.class, "birthDay", false, "BIRTH_DAY");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
    };


    public FriendsDao(DaoConfig config) {
        super(config);
    }
    
    public FriendsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIENDS' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'OWNER_ID' TEXT," + // 1: ownerId
                "'REAL_NAME' TEXT," + // 2: realName
                "'SEX' INTEGER," + // 3: sex
                "'AGE' INTEGER," + // 4: age
                "'HEAD_IMG' TEXT," + // 5: headImg
                "'MOTO' TEXT," + // 6: moto
                "'BIRTH_DAY' TEXT," + // 7: birthDay
                "'PHONE' TEXT);"); // 8: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIENDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Friends entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(2, ownerId);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(3, realName);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(4, sex);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(5, age);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(6, headImg);
        }
 
        String moto = entity.getMoto();
        if (moto != null) {
            stmt.bindString(7, moto);
        }
 
        String birthDay = entity.getBirthDay();
        if (birthDay != null) {
            stmt.bindString(8, birthDay);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Friends readEntity(Cursor cursor, int offset) {
        Friends entity = new Friends( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ownerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // realName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // age
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headImg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // moto
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthDay
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // phone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Friends entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setOwnerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRealName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAge(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHeadImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMoto(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthDay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Friends entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Friends entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
